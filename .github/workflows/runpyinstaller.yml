# This is a basic workflow for building ToneTyrant

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # ... commented for now ...
  #push:
  #  branches: [ master ]
  #pull_request:
  #  branches: [ master ]

  # Runs this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains of a linux build and two windows builds:
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    
    # Output is the built executable
    outputs: 
      executable: dist/tyrant

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Needs ALSA installed to build rtmidi
          sudo apt-get install -y libasound2-dev
          # Install SDL. This requirement seems new April 2022?
          sudo apt-get install -y libsdl2-dev
          # The wheel tends to not install correctly, so just disable binaries
          pip install python-rtmidi --no-binary :all:
          pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04 wxPython --no-cache-dir
          pip install pyinstaller
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Building
          pyinstaller tyrant.spec
          sudo chmod +x dist/tyrant
      - uses: actions/upload-artifact@v2
        with:
          name: linux-executable-artifact
          path: dist/tyrant
    
  build-windows:
    # The type of runner that the job will run on. This is Server 2019, corresponding
    # to Windows 10.
    #
    # PyInstaller only builds for the version of windows that's it's built on. That
    # means this will only run on Windows 10/11 64-bit.
    runs-on: windows-latest
    
    # Output is the built executable
    outputs: 
      executable: dist/tyrant.exe

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-rtmidi
          pip install wxPython
          pip install pyinstaller
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Building
          pyinstaller tyrant.spec
      - uses: actions/upload-artifact@v2
        with:
          name: windows-10-executable-artifact
          path: dist/tyrant.exe

  build-windows-7:
    # The type of runner that the job will run on. This is Server 2019, corresponding
    # to Windows 10.
    #
    # This is built using Nuitka (an alternative to PyInstaller). That should 
    # build executables that are more generally compatible, so there's a chance
    # this will run on Windows 7.
    runs-on: windows-latest
    
    ##  -- FOLLOWING IS COMMENTED --
    #  It shows how Nuitka can be used to build the project, but for now PyInstaller
    #  does a perfectly fine job.
    
    ## Output is the built executable
    #outputs: 
    #  executable: tyrant.exe
    #
    ## Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
    #  # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    #  - uses: actions/checkout@v2
    #  - name: Set up Python 3.8
    #    uses: actions/setup-python@v2
    #    with:
    #      python-version: "3.8"
    #  - name: Install dependencies
    #    run: |
    #      python -m pip install --upgrade pip
    #      pip install python-rtmidi
    #      pip install wxPython
    #      pip install nuitka
    #      pip install zstandard
    #  # Runs a set of commands using the runners shell
    #  - name: Run a multi-line script
    #    run: |
    #      echo Building
    #      python nuitka_build.py
    #  - uses: actions/upload-artifact@v2
    #    with:
    #      name: windows-7-executable-artifact
    #      path: tyrant.exe
